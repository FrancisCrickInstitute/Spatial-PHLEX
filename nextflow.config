/*
 * -------------------------------------------------
 *  Spatial-PHLEX Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

system_root = baseDir.subpath(0,1)
params {

    /*
    COHORT PARAMETERS
    */
    release = "release" //'2022_02_11_release'
    singularity_bind_path = "/$system_root"
    tracedir = "${params.outdir}/Spatial-PHLEX/${params.release}/pipeline_info"
    image_id_column = 'image_id'
    

    /*
    * SPATIAL CLUSTERING CONFIG PARAMETERS
    */

    sampleFile = false
    sampleFile_delimiter = '\t'
    objects = "./data/objects.txt" 
    phenotyping_column = 'cellType' //'majorType,cellType'
    objects_delimiter = '\t'
    phenotype_to_cluster = 'all'
    plot_palette = 'default'
    x_coord_col = 'centerX'
    y_coord_col = 'centerY'

    /*
    * GRAPH ANALYSIS CONFIG PARAMETERS
    */

    graph_type = 'nearest_neighbour' // 'nearest_neighbour' //
    neighborhood_input = false
    neighbourhood_module_no = 865
    barrier_source_cell_type = 'CD8 T cells'
    barrier_target_cell_type = 'Epithelial cells'
    barrier_cell_type = 'Myofibroblasts'
    n_neighbours = 10
    graph_radius = 35
    cluster_area_cutoff = 2000


    /*
    * Pipeline execution parameters:
    */

    overwrite = true
    dev = false
    number_of_inputs = 2
    outdir = '../../results'
    publish_dir_mode = 'copy'
    workflow_name = 'default'

    max_memory = 128.GB
    max_cpus = 16
    max_time = 24.h

    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames = false
    config_profile_description = false
    config_profile_contact = false
    config_profile_url = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// export to prevent clashes with local python environment
env {
  PYTHONNOUSERSITE = 1
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
